version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vantax-postgres
    environment:
      POSTGRES_DB: vantax
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vantax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vantax-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - vantax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: vantax-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ../backend/api-gateway
      dockerfile: Dockerfile
    container_name: vantax-api-gateway
    environment:
      NODE_ENV: production
      PORT: 4000
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    ports:
      - "4000:4000"
    depends_on:
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Identity Service
  identity-service:
    build:
      context: ../backend/identity-service
      dockerfile: Dockerfile
    container_name: vantax-identity-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID}
      AZURE_AD_CLIENT_SECRET: ${AZURE_AD_CLIENT_SECRET}
      AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID}
    depends_on:
      - postgres
      - redis
    networks:
      - vantax-network
    restart: unless-stopped

  # Operations Service
  operations-service:
    build:
      context: ../backend/operations-service
      dockerfile: Dockerfile
    container_name: vantax-operations-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ../backend/analytics-service
      dockerfile: Dockerfile
    container_name: vantax-analytics-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - vantax-network
    restart: unless-stopped

  # AI Service
  ai-service:
    build:
      context: ../backend/ai-service
      dockerfile: Dockerfile
    container_name: vantax-ai-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - vantax-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Integration Service
  integration-service:
    build:
      context: ../backend/integration-service
      dockerfile: Dockerfile
    container_name: vantax-integration-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      SAP_BASE_URL: ${SAP_BASE_URL}
      SAP_CLIENT_ID: ${SAP_CLIENT_ID}
      SAP_CLIENT_SECRET: ${SAP_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Co-op Service
  coop-service:
    build:
      context: ../backend/coop-service
      dockerfile: Dockerfile
    container_name: vantax-coop-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - vantax-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ../backend/notification-service
      dockerfile: Dockerfile
    container_name: vantax-notification-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Reporting Service
  reporting-service:
    build:
      context: ../backend/reporting-service
      dockerfile: Dockerfile
    container_name: vantax-reporting-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - vantax-network
    restart: unless-stopped

  # Workflow Service
  workflow-service:
    build:
      context: ../backend/workflow-service
      dockerfile: Dockerfile
    container_name: vantax-workflow-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Audit Service
  audit-service:
    build:
      context: ../backend/audit-service
      dockerfile: Dockerfile
    container_name: vantax-audit-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/vantax
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - vantax-network
    restart: unless-stopped

  # Web Application
  web-app:
    build:
      context: ../frontend/web-app
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${API_URL}
        REACT_APP_AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID}
        REACT_APP_AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID}
    container_name: vantax-web-app
    ports:
      - "3000:80"
    networks:
      - vantax-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vantax-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - api-gateway
      - web-app
    networks:
      - vantax-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vantax-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vantax-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vantax-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - vantax-network
    restart: unless-stopped

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: vantax-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - vantax-network
    restart: unless-stopped

  # Log Shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: vantax-promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yml:/etc/promtail/promtail.yml:ro
    depends_on:
      - loki
    networks:
      - vantax-network
    restart: unless-stopped

networks:
  vantax-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  nginx_cache:
  prometheus_data:
  grafana_data:
  loki_data: